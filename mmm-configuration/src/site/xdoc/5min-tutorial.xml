<?xml version="1.0"?>
<!-- $Id: 5min-tutorial.xml 201 2006-08-02 22:47:40Z hohwille $ -->
<document>
  <properties>
    <title>5 Minute Tutorial</title>
    <author email="hohwille@users.sourceforge.net">J&#246;rg Hohwiller</author>
  </properties>

  <body>
    <section name="5 Minute Tutorial">
      <p>
        If you have not read the <a href="1min-tutorial.html">1 minute tutorial</a> please
        start there.
      </p>
      <subsection name="Create initial configuration">
        <p>
          Now you want to know how to read and create the initial root configuration.
          This part is a little tricky but please note that you only have to do it once.
          First of all you need to get an accessor for the configuration. Here is an example
          how to get access to a simple file.
        </p>
        <source>
File configFile = new File("myConfig.xml");
ConfigurationAccessIF accessor = new FileAccess(configFile);
        </source>
        <p>
          Now you have to create a document using a factory for the proper format of the 
          configuration. As we can guess from the filename the format will be XML in our 
          example. So we use the following code:
        </p>
        <source>
ConfigurationFactoryIF factory = new XmlFactory();
ConfigurationDocumentIF document = factory.create(accessor);
ConfigurationIF configuration = document.getConfiguration();
        </source>
        <p>
          Puh! That was the heavy part. Anyways this allows you to access you configuration 
          from anywhere (file, URL, database, etc.) and in any format (XML, properties, etc.).
          Next we will see why we only need to create the initial configuration once.
        </p>
      </subsection>
      <subsection name="Include configurations">
        <p>
          The idea of this configuration library is that you can have a single configuration
          tree for all your configuration data. This does NOT mean that you should dump 
          everything in one big file or all of your configuration is read into memory.
        </p>
        <source><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<myRoot xmlns:cfg="http://m-m-m.sf.net/namespaces/configuration">
  ...
  <myChild>
    <cfg:include access="file" type="xml" href="mySubConfiguration.xml" lazy="false" descendants="."/>
  </myChild>
  ...
</myRoot>        
]]></source>
        <p>
          The &lt;cfg:include&gt; element in the XML above will automatically be replaced
          with the configuration from the XML file <em>mySubConfiguration.xml</em>.
          If the optional attribute <em>lazy</em> is set to <em>true</em>, the included
          configuration will be loaded when the parent configuration element 
          (&lt;myChild&gt;) is accessed (via the configuration API) for the first time.
          The optional attributes <em>access</em> and <em>type</em> indicate the 
          accessor(-factory) and the format. The required attribute <em>href</em> defines 
          the location of the configuration and is interpreted by the accessor(-factory).
          For the accessor <em>file</em> you can also use glob-patterns in the path (e.g.
          <em>plugins/*/configuration.xml</em>). In this case all matching files are 
          included at this point. Finally the optional <em>descendants</em> can be used
          if you do not want to include the complete configuration document (root-node(s)) 
          but only parts of it. Therefore this attribute can be set to the path identifying
          the nodes (configuration descendants) to include.
        </p>
      </subsection>
      <subsection name="Modify and save configuration">
        <p>
          TODO
        </p>
      </subsection>
    </section>
  </body>
</document>
