<?xml version="1.0"?>
<!-- $Id$ -->
<document>
  <properties>
    <title>1 Minute Tutorial</title>
    <author email="hohwille@users.sourceforge.net">J&#246;rg Hohwiller</author>
  </properties>

  <body>
    <section name="1 Minute Tutorial">
      <subsection name="Example XML">
        <p>The following example is used to illustrate the use of the configuration API.
          Please note that it is NOT an example of how to design your configuration.</p>
        <source><![CDATA[
<config>
  <server @port="8080" @host="localhost">
    <service @impl="net.foo.MyForum"/>
    <service @impl="com.bar.PowerShop" @singleton="false"/>
  </server>
</config>
]]></source>
      </subsection>
      <subsection name="Reading configuration">
        <p>Now look at the following code:</p>
        <source>
ConfigurationIF conf = getConfigFromSomewhere(); //represents &lt;config&gt;
ConfigurationIF serverConf = conf.getDescendant("server");
ConfigurationIF portConf = serverConf.getDescendant("@port");
int portNumber = portConf.getValue().getInteger(80);
        </source>
        <p>
          The method getDescendant is used to retrieve the child of a configuration.
          As you can guess by the name of the method, you could also write:
        </p>
        <source>
ConfigurationIF conf = getConfigFromSomewhere(); //represents &lt;config&gt;
ConfigurationIF portConf = conf.getDescendant("server/@port");
int portNumber = portConf.getValue().getInteger(80);
        </source>
        <p>
          Please note that the descendant path syntax is NOT the same as XPath even though
          it should be very easy to understand and use if you are familiar with XPath.<br/>
          The last line reads the value of the <em>port</em> attribute as an integer and
          will assign <em>8080</em> to the variable <em>portNumber</em>. The value 
          <em>80</em> is supplied as a default value. This default will be used if the value is
          NOT available. If no default is supplied, the value is required and an exception 
          is thrown if it is NOT available.<br/>
          Now if the feature <em>addDefaults</em> is enabled and the configuration would have been
          empty (&lt;config/&gt;), the example above would automatically produce the 
          following XML when the configuration is saved.
        </p>
        <source><![CDATA[
<config>
  <server @port="80"/>
</server>
]]></source>
        <p>
          Now if you want to determine if the port attribute is available without catching 
          exceptions (e.g. via getInteger()), you can write:
        </p>
        <source>
GenericValueIF portValue = portConf.getValue();
if (portValue.hasValue()) {          
  int portNumber = portValue.getInteger();
  ...
} else {
  ...
}
        </source>
        <p>
          The example above would NOT add the port attribute, even if <em>addDefaults</em> 
          is activated (true).
        </p>
      </subsection>
      <subsection name="Find existing descendants">
        <p>
          As we have seen above the method <em>getDescendant</em> requests a single 
          descendant by  its path. It will never return <em>null</em> and therefore also 
          return a result even if the requested configuration (node) does NOT (yet) exist. 
          What if we have a situation where we have two different nodes and one of them is
          required? What if we want to iterate over any number of child elements?<br/>
          Here we can use the method <em>getDescendants</em> that returns an iterator of all
          descendants matching the given path. Here is an example:
        </p>
        <source><![CDATA[
Iterator<? extends ConfigurationIF> attributeIt = serverConf.getDescendants("@port|@host");
while (attributeIt.hasNext()) {
  ConfigurationIF attr = attributeIt.next();
  ...
}
Collection<? extends ConfigurationIF> serviceCollection = serverConf.getDescendants("service");
for (ConfigurationIF serviceConf: serviceCollection) {
  MyServiceApi serviceInstance = serviceConf.getValue().getJavaClassInstance(MyServiceApi.class);
  if (serviceConf.getDescendant("@singleton").getValue().getBoolean()) {
    ...
  } else {
    ...
  }
}
]]></source>
        <p>
          Instead of <em>getDescendant</em> the method <em>getDescendants</em> will only 
          return configuration nodes that already exist in the configuration.
          Please note that we do not need to cast anywhere (esp. look at <em>serviceInstance</em>).
        </p>
      </subsection>
      <subsection name="Learn more...">
        <p>
          Congratulations, you have completed the 1 minute tutorial. Please continue with 
          the <a href="5min-tutorial.html">5 minute tutorial</a>.
        </p>
      </subsection>
    </section>
  </body>
</document>
