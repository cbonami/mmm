<?xml version="1.0"?>
<!-- $Id$ -->
<document>
  <properties>
    <title>Tutorial</title>
    <author email="hohwille@users.sourceforge.net">J&#246;rg Hohwiller</author>
  </properties>

  <body>
    <section name="Tutorial">
      This tutorial is showing the plain way to setup the search components.
      Typically you will use a sophisticated IoC framework that injects all this
      stuff from a configuration file. Therefore all components are properly annotated.
      <subsection name="Indexing">
        First of all you need to create a <code>SearchIndexer</code>:
        <source>
String indexDirectory = "/tmp/index";        
Analyzer analyzer = new StandardAnalyzer();
IndexModifier indexModifier = new IndexModifier(indexDirectory, analyzer, true);
SearchIndexer indexer = new LuceneSearchIndexer(indexModifier);
        </source>
        Additionally you can use the <a href="../mmm-search-parser/index.html"><code>ContentParserService</code></a> to index
        various content types:
        <source>
ContentParserServiceImpl parserServiceImpl = new ContentParserServiceImpl();
// allow 0.5GB buffer size
parserServiceImpl.setMaximumBufferSize(500 * 1024);
ContentParserService parserService = parserServiceImpl;
        </source>
        Now you are ready to index files:
        <source>
File file = ...;
MutableSearchEntry entry = indexer.createEntry();
entry.setUri(file.getPath());
entry.setSize(file.length());
addMetadata(file, entry);
entry.setProperty("myProperty", "my value", MutableSearchEntry.Mode.TEXT);
indexer.add(entry);
        </source>
        To make it complete here is what <code>addMetadata</code> would typically do:
        <!-- TODO: FileUtil.getExtension -->
        <source>
String extension = getExtension(file);
if (extension != null) {
  entry.setType(extension);
  ContentParser parser = parserService.getParser(extension);
  if (parser != null) {
    InputStream inputStream = new FileInputStream(file);
    try {
      Properties properties = parser.parse(inputStream, fileSize);
      String title = getProperty(properties, ContentParser.PROPERTY_KEY_TITLE);
      if (title != null) {
        entry.setTitle(title);
      }
      String author = getProperty(properties, ContentParser.PROPERTY_KEY_AUTHOR);
      if (author != null) {
        entry.setAuthor(author);
      }
      String text = getProperty(properties, ContentParser.PROPERTY_KEY_TEXT);
      if (text != null) {
        entry.setText(text);
      }
    } catch (Exception e) {
      e.printStackTrace();
    } finally {
      inputStream.close();
    }
  }
}
        </source>        
      </subsection>
      <subsection name="Searching">
        In order to search, you need an instance of <code>SearchEngine</code>:
        <source>
String indexDirectory = "/tmp/index";
LuceneSearchEngine luceneEngine = new LuceneSearchEngine();
luceneEngine.setIndexPath(indexDirectory);
luceneEngine.setIgnoreLeadingWildcards(false);
luceneEngine.initialize();
SearchEngine searchEngine = luceneEngine;
        </source>
        Now we can perform a search and show some results:
        <source><![CDATA[
String queryString = ...;
SearchQueryBuilder queryBuilder = searchEngine.getQueryBuilder();
SearchQuery query = queryBuilder.parseStandardQuery(queryString);
int pageNumber = 0;
int hitsPerPage = 10;
SearchResultPage resultPage = this.searchEngine.search(query, pageNumber, hitsPerPage);
System.out.println("Hits " + resultPage.getHitStartNumber() + " to " + resultPage.getHitEndNumber()
                           + " of total " + resultPage.getTotalHitCount() + "...");
int hitCount = resultPage.getPageHitCount();
for (int i = 0; i < hitCount; i++) {
  SearchHit hit = resultPage.getPageHit(i);
  System.out.println(hit.getScore(100) + "% <a href='http://mydomain.com/files/" + hit.getUri() + "'>" + hit.getTitle + "</a>");
  System.out.println(hit.getHighlightedText());
}]]></source>
      </subsection>
      <subsection name="Index and Search files from disc">
        You think the stuff above is somewhat overcomplicated?
        Well, if you want to index directories from your local disc 
        you can have it even a lot easier using 
        <a href="mmm-search-indexer-lucene/index.html">Search Indexer::Lucene</a> for 
        indexing. For searching there is also a solution provided by
        <a href="mmm-search-engine-webapp/index.html">Search Engine::Webapp</a>.
        Simply create your configuration as XML file like this:
        <source><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<search-config>
  <!-- core configuration of the search-engine -->
  <search-engine>
    <analyzer class="org.apache.lucene.analysis.standard.StandardAnalyzer"/>
    <index path="~/search/index/" update="false"/>
    <!-- Enable wildcard queries for lucene (WARNING: this is a performance
    risk. Never use this for public internet searches!) -->
    <search leading-wildcard="true" refresh-delay="3600"/>
  </search-engine>
  <!-- configuration of filters used when indexing directories -->
  <filters>
    <filter-chain id="default-filter" default-result="true">
      <!-- ignore folders and files that start with '.' (e.g. ".svn", ".eclipse") -->
      <exclude pattern="/\.[^/]*$"/>
      <!-- ignore folders (and files) with the name "CVS" -->
      <exclude pattern="/CVS$"/>
    </filter-chain>
    <filter-chain id="maven-filter" default-result="true" parent="default-filter">
      <!-- ignore folders (and files) with the name "target" -->
      <exclude pattern="/target$"/>
    </filter-chain>
  </filters>
  <!-- configuration of directories to index -->
  <directories>
    <directory path="~/projects/foo/trunk" source="svn" filter="maven-filter" index-base-path=""/>
    <directory path="~/projects/foo/wiki/data" source="wiki" filter="default-filter" index-base-path=""/>
  </directories>
  <!-- configuration of sources for view (webapp) -->
  <sources>
    <source id="" name="Any"/>
    <source id="svn" name="Subversion" url-prefix="http://foo.org/svn/trunk"/>
    <source id="wiki" name="Wiki" url-prefix="http://foo.org/wiki/"/>
  </sources>
  <!-- configuration of file-types for view (webapp) -->
  <filetypes default-icon="file.gif">
    <type id="" name="Any"/>
    <!-- office formats -->
    <type id="pdf" name="PDF" icon="pdf.gif"/>
    <type id="dot" icon="word.gif"/>
    <type id="doc" name="Word" icon="word.gif"/>
    <type id="rtf" name="RTF" icon="rtf.gif"/>
    <type id="xls" name="Excel" icon="excel.gif"/>
    <type id="ppt" name="Powerpoint" icon="powerpoint.gif"/>
    <type id="ps" name="Postscript" icon="postscript.gif"/>

    <!-- plain formats -->
    <type id="txt" icon="text.gif"/>
    <type id="xml" icon="text.gif"/>

    <!-- web formats -->
    <type id="html" name="HTML" icon="firefox.gif"/>
    <type id="htm" icon="ie.gif"/>
    <type id="css" icon="css.gif"/>

    <!-- etc. etc. etc. -->

  </filetypes>
</search-config>
]]></source>
        Now for indexing all you have to do is start the indexer with this XML.
        <source><![CDATA[
java net.sf.mmm.search.indexer.impl.LuceneDirectorySearchIndexer <path-to-xml-config>
]]></source>
        For searching all you need to do is to throw the WAR file of
        <a href="mmm-search-engine-webapp/index.html">mmm-search-engine-webapp</a>
        into your tomcat 5.5+. If you have the XML config described above located 
        at <code>~/search.xml</code> you do NOT even have to modify the web.xml.
        If you update your search-index by re-running the indexer you need to wait
        at most the configured <code>refresh-delay</code> until the change takes effect.
      </subsection>
    </section>
  </body>
</document>
